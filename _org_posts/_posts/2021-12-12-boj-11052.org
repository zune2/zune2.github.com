#+HTML: ---
#+HTML: title: BOJ 11052 카드 구매하기
#+HTML: tags: DP
#+HTML: toc: true
#+HTML: toc_sticky: true
#+HTML: ---
#+OPTIONS: ^:nil

** BOJ 11052 카드 구매하기
- 카드팩의 종류가 있음
- P1 : 카드 1장 들어있음
- P2 : 카드 2장 들어있음
- 지불해야 하는 금액의 최대값
** 접근하기
#+BEGIN_EXAMPLE
예제 분석하기
5
10 9 8 7 6

1장 살때 10
2장 살때 9
3장 살때 8
4장 살때 7
5장 살때 6

dp[0] = 0
dp[1] = max(dp[1], dp[1-1] + a[1] = 10) = 10

dp[2] = max(dp[2], dp[2-1] + a[1]
                   dp[2-2] + a[2]) = 20, 9 = 20,   dp[2] = 20

dp[3] = max(dp[3], dp[3-1] + a[1], 
                   dp[3-2] + a[2], 
                   dp[3-3] + a[3]) = 30, 18, 8,    dp[3] = 30

dp[4] = max(dp[4], dp[4-1] + a[1]   30 + 10 = 40
                   dp[4-2] + a[2]   20 + 9  = 29
                   dp[4-3] + a[3]   10 + 8  = 18
                   dp[4-4] + a[4]   0 + 6  = 6     dp[4] = 40

dp[5] = max(dp[5], dp[5-1] + a[1]    50
                   dp[5-2] + a[2]    29
                   dp[5-3] + a[3]    28
                   dp[5-4] + a[4]    17
                   dp[5-5] + a[5]    6             dp[5] = 50           

점화 관계
dp[i] = max(dp[i], dp[i-j] + a[j])
#+END_EXAMPLE

** 코드
#+BEGIN_SRC cpp
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

int N;
char str[60];

int main(int argc, char* argv[])
{
    scanf("%d", &N);
    vector <string> vp(N);    
    char str[60];
    for(int i=0;i<N;i++) {
        scanf("%s", str);
        string s(str);
        vp[i] = s;
    }
    sort(vp.begin(), vp.end()); 
    
    int ans = 1;
    int cnt = 1;
    string out = vp[0];
    for(int i=1;i<(int)vp.size();i++) {
        if (vp[i-1] == vp[i]) {
            cnt++;
        } else {
            cnt = 1;
        }
        if (ans < cnt) {
            ans = cnt;
            out = vp[i];
        }
    }
    printf("%s\n", out.c_str());
    return 0;
}
#+END_SRC

** 문제 링크
- https://www.acmicpc.net/problem/11052
