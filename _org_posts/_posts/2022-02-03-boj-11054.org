#+HTML: ---
#+HTML: title: BOJ 11054 가장 긴 바이토닉 부분 수열
#+HTML: tags: DP
#+HTML: toc: true
#+HTML: toc_sticky: true
#+HTML: ---
#+OPTIONS: ^:nil

** BOJ 11054 가장 긴 바이토닉 부분 수열
- 
** 접근하기
#+BEGIN_EXAMPLE
1. dp LIS 알고리즘으로 구한다.

왼쪽부터 오른쪽으로 한번 LIS - dp table 1

왼쪽에서부터 오른쪽으로 한번 LIS 적용 - dp table 2

ans = max(ans, dp1[k] + dp2[k] - 1) 
#+END_EXAMPLE

** 코드
#+BEGIN_SRC cpp
#include <bits/stdc++.h>
using namespace std;
#define FASTIO ios_base::sync_with_stdio(false); cin.tie(NULL);

int N;
int a[1010];

int dp1[1010] = {0,};
int dp2[1010] = {0,};

int main(int argc, char* argv[])
{
    FASTIO
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
#endif

    cin >> N;
    for(int i=1;i<=N;i++) {
        cin >> a[i];
    }

    for(int i=1;i<=N;i++) {
        dp1[i] = 1;
        for(int j=1;j<=i;j++) {
            if (a[j] < a[i] && dp1[i] < dp1[j] + 1) {
                dp1[i] = dp1[j] + 1;
            }
        }
    }
    
    for(int i=N;i>=1;i--) {
        dp2[i] = 1;
        for(int j=N;j>=i;j--) {
            if (a[j] < a[i] && dp2[i] < dp2[j] + 1) {
                dp2[i] = dp2[j] + 1;
            }
        }
    }

    int ans = 0;
    for(int i=1;i<=N;i++) {
        ans = max(ans, dp1[i] + dp2[i] - 1);
    }
    cout << ans << '\n';
    return 0;
}
#+END_SRC

** 문제 링크
- https://www.acmicpc.net/problem/11054
