#+HTML: ---
#+HTML: title: org-babel로 script 구동하기
#+HTML: tags: org-mode
#+HTML: toc: true
#+HTML: toc_sticky: true
#+HTML: ---
#+OPTIONS: ^:nil

** 환경설정
- C-c C-c 누르면 됨
*** C, python, shell을 활성화
+ .emacs에 다음을 넣어준다.
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (C . t)
   (python . t)
   (shell . t)
   ))
#+END_SRC

*** yes/no 질문없이 code블록 실행하기
#+BEGIN_SRC emacs-lisp
(defun my-org-confirm-babel-evaluate (lang body)
  (not (string= lang "ditaa"))
  (not (string= lang "C"))
  (not (string= lang "python"))
  (not (string= lang "shell"))
)  ;don't ask for ditaa
(setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)
#+END_SRC
- [[https://orgmode.org/manual/Code-Evaluation-Security.html][Code Evaluation Security]]
- shell은 그래도 yes/no prompt가 뜬다.

** python - hello world 출력

코드
#+BEGIN_EXAMPLE
#+BEGIN_SRC python :results output :exports both
print("Hello")
#+END_SRC

#+RESULTS:
: Hello
#+END_EXAMPLE

소스 export
#+BEGIN_SRC python :results output :exports code
print("Hello")
#+END_SRC

결과
#+RESULTS:
: Hello

** bash - hello world 출력

#+BEGIN_EXAMPLE
#+begin_src shell :results output :exports both
  echo "Hello World"
#+end_src

#+RESULTS:
: Hello World
#+END_EXAMPLE


#+begin_src shell :results output :exports both
  echo "Hello World"
#+end_src

#+RESULTS:
: Hello World

** dot graph 만들기
- 파일 위치를 저장하고, export하는 config 작성 필요
#+BEGIN_SRC dot :file test.png :cmdline -Kdot -Tpng
digraph name {
 "1" -> "3"
 "2" -> "1"
 "3" -> "3"
 "4" -> "7"
 "5" -> "3"
 "6" -> "4"
 "7" -> "6"
}
#+END_SRC

#+RESULTS:
[[file:test.png]]


** 참고자료
+ [[https://orgmode.org/worg/org-contrib/babel/][Babel: Active Code in Org Mode]]
