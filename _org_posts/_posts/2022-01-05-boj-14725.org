#+HTML: ---
#+HTML: title: BOJ 14725 개미굴
#+HTML: tags: dfs Trie
#+HTML: ---
#+OPTIONS: ^:nil

** BOJ 14725 개미굴
- string을 key로 하는 Trie를 STL로 구성하기
- STL map은 key가 정렬된 순서로 추가된다. -> 단어 알파벳 오름차순 

** 접근하기
#+BEGIN_EXAMPLE
map<string, Node> Node에 재귀적인 형태로 추가
단어가 추가되는 Trie라고 생각하기
#+END_EXAMPLE

** 코드 - STL map 이용
#+BEGIN_SRC cpp
#include <bits/stdc++.h>
using namespace std;

typedef struct Node{
	map<string, Node> mp;
} Node;

int T, N;
Node root;

void dfs(Node& cur, int idx)
{
	for(auto& o : cur.mp) {  // map - key로 정렬되어 있음
		for(int i=0;i<idx;i++) {
			printf("--");
		}
		cout << o.first << '\n';
		dfs(o.second, idx+1);
	}
}

void insert(Node& cur, int idx, vector<string>& a, int size)
{
	if (idx == size) return;
	if (cur.mp.count(a[idx]) == 0) {
		cur.mp[a[idx]] = Node();   // 생성자로 객체 추가
	}
	insert(cur.mp[a[idx]], idx+1, a, size);
}

int main(int argc, char* argv[])
{
	scanf("%d", &T);
	for(int i=0;i<T;i++) {
		scanf("%d", &N);
		vector<string> a(N);
		for(int j=0;j<N;j++) {
			cin >> a[j];
		}
		insert(root, 0, a, N);
	}
	dfs(root, 0);
	return 0;
}
#+END_SRC

** 코드 - LCRS tree 구조 이용

** 문제 링크
- https://www.acmicpc.net/problem/14725

** 풀이 참고
- https://justicehui.github.io/ps/2019/08/27/BOJ14725/
