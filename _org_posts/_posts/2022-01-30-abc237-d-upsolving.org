#+HTML: ---
#+HTML: layout: post
#+HTML: title: abc235 D - LR insertion
#+HTML: tags: AtCoder STL
#+HTML: ---
#+OPTIONS: ^:nil

** D - LR insertion

** 접근하기
#+BEGIN_EXAMPLE
5
LRRLR

0
L  0 앞에 1  1 0
R  1 뒤에 2  1 2 0
R  2 뒤에 3  1 2 3 0
L  3 앞에 4  1 2 4 3 0
R  4 뒤에 5  1 2 4 5 3 0

빈 list에 0을 넣고, 마지막으로 넣은 위치를 cursor로 가리키며, 추가
#+END_EXAMPLE

** 코드 - STL list
#+BEGIN_SRC cpp
#include <bits/stdc++.h>
using namespace std;
#define FASTIO ios_base::sync_with_stdio(false); cin.tie(nullptr);

int N;
string s;
list<int> lst;

int main(int argc, char * argv[]) {
    FASTIO;
    cin >> N >> s;
    auto cursor = lst.insert(lst.begin(), 0);

    for (int i = 0; i < N; ++i) {
        if (s[i] == 'R') {
            cursor = lst.insert(++cursor, i + 1);
        } else {
            cursor = lst.insert(cursor, i + 1);
        }
    }
    for (int x : lst) {
        cout << x << " ";
    }
    cout << '\n';
    return 0;
}
#+END_SRC


** 코드 - list 구현
#+BEGIN_SRC cpp
#include <bits/stdc++.h>
using namespace std;

int N;
char str[500005];

typedef struct Node {
    int num;
    Node* prev;
    Node* next;
} Node;

Node pool[500005];
int idx;

Node* CreateNode(int num)
{
    Node* ptr = &pool[idx++];
    ptr->num = num;
    ptr->prev = NULL;
    ptr->next = NULL;
    return ptr;
}

Node* insert_next(Node* cursor, int num)
{
    Node* ptr = CreateNode(num);
    Node* before = cursor;
    Node* after = cursor->next;

    before->next = ptr;
    ptr->prev = before;
    
    ptr->next = after;
    after->prev = ptr;

    return ptr;
}

Node* insert_prev(Node* cursor, int num)
{
    Node* ptr = CreateNode(num);

    Node* before = cursor->prev;
    Node* after = cursor;

    before->next = ptr;
    ptr->prev = before;
    
    ptr->next = after;
    after->prev = ptr;

    return ptr;
}


int main(int argc, char* argv[])
{
    idx = 0;
    scanf("%d", &N);
    scanf("%s", str);

    Node* head = CreateNode(-1);
    Node* tail = CreateNode(-1);

    head->next = tail;
    head->prev = head;

    tail->prev = head;
    tail->next = tail;

    Node* cursor = head;
    cursor = insert_next(cursor, 0);

    for(int i=0;str[i];i++) {
        if (str[i] == 'L'){ // left -> before
            cursor = insert_prev(cursor, i+1);
        } else {            // right -> after
            cursor = insert_next(cursor, i+1);
        }
    }

    Node* ptr = head->next;
    while(ptr != ptr->next) {
        printf("%d ", ptr->num); 
        ptr = ptr->next;
    }
    printf("\n");
    return 0;
}
#+END_SRC


** 문제 링크
- https://atcoder.jp/contests/abc237/tasks/abc237_d
