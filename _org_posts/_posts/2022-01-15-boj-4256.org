#+HTML: ---
#+HTML: title: BOJ 4256 트리
#+HTML: tags: 분할정복 Tree
#+HTML: toc: true
#+HTML: toc_sticky: true
#+HTML: ---
#+OPTIONS: ^:nil

** BOJ 4256 트리

** 접근하기
#+BEGIN_EXAMPLE
분할정복으로 접근해야 하는 문제

전위 순회 3,6,5,4,8,7,1,2   
    --> 맨 앞이 root node
    --> 중위순회에에서 왼쪽 subtree의 노드수 4를 이용하면
    --> 3  ,6,5,4,8,  7,1,2   

    --> root = 0번 index
    --> 왼쪽 subtree 시작위치 1  == root + 1   -> 값
    --> 오른쪽 subtree 시작위치 5 == root + 4 - 0 + 1
    --> 4값은 중위순회에서 얻음    

중위 순회 5,6,8,4,3,1,2,7  
    --> 한가운데가 root node -> 왼쪽 sub tree, 오른쪽 sub tree로 나눌 수 있음
    --> 3이 root, 왼쪽 subtree가 4개, 오른쪽 subtree가 3개의 노드가 있음

후위 순회 5,8,4,6,2,1,7,3

#+END_EXAMPLE

** 코드
#+BEGIN_SRC cpp
#include <bits/stdc++.h>

int T;
int N;

int pre[1010];
int in[1010];

void f(int s, int e, int root)
{
    for(int i=s;i<e;i++) {
        if (in[i] == pre[root]) {
            f(s, i, root + 1);
            f(i+1, e, root + (i-s) + 1);
            printf("%d ", pre[root]);
        }
    }
}

void solve()
{
    scanf("%d", &N);
    for(int i=0;i<N;i++) {
        scanf("%d", &pre[i]); 
    }
    for(int i=0;i<N;i++) {
        scanf("%d", &in[i]); 
    }

    f(0, N, 0);
    printf("\n");
}

int main(int argc, char* argv[])
{
    scanf("%d", &T);
    for(int tc=1;tc<=T;tc++) {
        solve();
    }
    return 0;
}
#+END_SRC

** 문제 링크
- https://www.acmicpc.net/problem/4256
