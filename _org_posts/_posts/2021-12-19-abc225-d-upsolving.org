#+HTML: ---
#+HTML: layout: post
#+HTML: title: abc225 D - Play Train
#+HTML: tags: AtCoder
#+HTML: ---
#+OPTIONS: ^:nil

** D - Play Train

** 접근하기
#+BEGIN_EXAMPLE
- 두 노드의 연결 O(1)
- 연결된 두 노드 분리 O(1)
- 번호를 이용해서 연결된 노드 출력하기 O(N)
- N이 10만이므로 list를 구성해서 풀이 가능
#+END_EXAMPLE

** 코드
#+BEGIN_SRC cpp
#include <cstdio>

int N, Q;

typedef struct Node {
    int front;
    int rear;
} Node;

Node a[100010];

int out[100010];
void print_func(int num) {

    int k = num;
    while(a[k].front != 0) {
        int prev = a[k].front;
        k = prev;
    }
    
    int idx = 0;
     while(a[k].rear != 0) {
        out[idx++] = k;
        int next = a[k].rear;
        k = next;
    }
    out[idx++] = k;
    
    printf("%d ", idx);
    for(register int i=0;i<idx;i++) {
        printf("%d ", out[i]);
    } 
    printf("\n");
}

int main(int argc, char* argv[])
{
    scanf("%d %d", &N, &Q);

    int cmd;
    int num1, num2;
    for(int i=0;i<Q;i++) {
        scanf("%d", &cmd);
        switch(cmd) {
        case 1:
            scanf("%d %d", &num1, &num2);
            a[num1].rear = num2;
            a[num2].front = num1;
            break;
        case 2:
            scanf("%d %d", &num1, &num2);
            a[num1].rear = 0;
            a[num2].front = 0;
            break;
        case 3:
            scanf("%d", &num1);
            print_func(num1);
            break;
        }
    }
    return 0;
}
#+END_SRC

** 문제 링크
- https://atcoder.jp/contests/abc225/tasks/abc225_d
