#+HTML: ---
#+HTML: layout: post
#+HTML: title: BOJ 9655 돌게임
#+HTML: tags: DP 수학
#+HTML: ---
#+OPTIONS: ^:nil

** 돌게임
- 1, 3개의 돌을 순서대로 가져갈 때 승자 구하기

** 접근하기
#+BEGIN_EXAMPLE

1개
A

3개
A A A -> A

4개    -> B
A B B B
A A A B

5개
A B B B A  -> A

규칙대로 써보면, 홀수이면 A, 짝수이면 B가 이김

#+END_EXAMPLE

** 코드1 - 홀짝
#+BEGIN_SRC cpp
#include <stdio.h>

int N;

int main(int argc, char* argv[])
{
    scanf("%d", &N);
    if (N%2 == 1) {
        printf("SK\n");
    } else {
        printf("CY\n");
    }
    return 0;
}
#+END_SRC

** 코드2 - dp 
- 홀짝 규칙을 점화식으로
#+BEGIN_SRC cpp
#include <stdio.h>

int N;

int dp[1001];

int main(int argc, char* argv[])
{
    dp[0] = 0;
    scanf("%d", &N);
    dp[1] = 1;  // Win SK
    dp[2] = 0;
    dp[3] = 1;
    for(int i=4;i<=N;i++) {
        dp[i] = !dp[i-1];
    }
    if (dp[N]) {
        printf("SK\n");
    } else {
        printf("CY\n");
    }
    return 0;
}
#+END_SRC

** 코드3 - dp - 최소 게임의 횟수를 dp[k]로 놓기 
- 거리를 기준으로 하는 점화식 표현 가능

#+BEGIN_EXAMPLE
dp[k] : k번째 턴에서 최소 게임의 횟수

dp[0] = 0 
dp[1] = 1
dp[2] = 1, 1 = 2
dp[3] = min(dp[3-3], dp[3-1]) + 1
...
dp[k] = min(dp[k-3], dp[k-1]) + 1
#+END_EXAMPLE

#+BEGIN_SRC cpp
#include <bits/stdc++.h>
using namespace std;

int N;

// 1, 3
int dp[1010]; // dp[k] : 최소 게임의 횟수

int main(int argc, char* argv[])
{
    // 0 1 1 1 2 3
    scanf("%d", &N);
    dp[0] = 0;
    dp[1] = 1;
    dp[2] = 2;
    for(int i=3;i<=N;i++) {
        dp[i] = min(dp[i-1], dp[i-3]) + 1;
    }

#if 0
    for(int i=1;i<=N;i++) {
        printf("%d ", dp[i]);
    }
    print("\n");
#endif

    if (dp[N] % 2 == 1) 
        printf("SK\n");
    else
        printf("CY\n");
    return 0;
}
#+END_SRC
** 문제 링크
- https://www.acmicpc.net/problem/9655

** 풀이/설명 참고
- https://beginnerdeveloper-lit.tistory.com/83
