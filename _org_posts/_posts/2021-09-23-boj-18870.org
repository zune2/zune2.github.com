#+HTML: ---
#+HTML: title: BOJ 18870 좌표압축
#+HTML: tags: 좌표압축
#+HTML: toc: true
#+HTML: toc_sticky: true
#+HTML: ---
#+OPTIONS: ^:nil

** BOJ 188770 좌표압축
  
** 접근하기
- 좌표압축을 묻는 문제

** 코드 1
#+BEGIN_SRC cpp
mespace std;
int N;

typedef struct Node
{
    int val;
    int idx;
    int val2;
} Node;

Node pool[1000010];

bool compare(Node p1, Node p2)
{
    return (p1.val < p2.val);
}

bool compare2(Node p1, Node p2)
{
    return (p1.idx < p2.idx);
}

int main(int argc, char* argv[])
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    scanf("%d", &N);
    for(int i=0;i<N;i++) {
        scanf("%d", &pool[i].val);
        pool[i].idx = i;
        pool[i].val2 = 0;
    }
    sort(pool, pool+N, compare);

    int cnt = 0;
    for(int i=0;i<N;i++) {
        if (i != 0 && pool[i-1].val == pool[i].val) {
            pool[i].val2 = cnt-1;
        } else {
            pool[i].val2 = cnt++;
        }
    }
    sort(pool, pool+N, compare2); // 입력받은 index순서로 정렬함
    for(int i=0;i<N;i++) {
        printf("%d ", pool[i].val2);
    }
    printf("\n");
    return 0;
}
#+END_SRC

** 코드 2 - STL
#+BEGIN_SRC cpp
#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;

int N;
vector<int> a;
vector<int> b;

int main(int argc, char* argv[])
{
    scanf("%d", &N);
    
    a.resize(N);
    b.resize(N);

    for(int i=0;i<N;i++) {
        scanf("%d", &a[i]);
        b[i] = a[i];
    }
    
    sort(a.begin(), a.end());
    a.erase(unique(a.begin(), a.end()), a.end()); 

    for(auto& c : b) {
        cout << lower_bound(a.begin(), a.end(), c) - a.begin() << " "; // index를 얻을 수 있음
    } 
    cout << endl;
    return 0;
}
#+END_SRC
** 참고자료
- [[https://jason9319.tistory.com/356][좌표압축기법]]
- [[https://blog.hamayanhamayan.com/entry/2021/08/09/010106][좌표압축 설명]]

** 문제 링크
- https://www.acmicpc.net/problem/18870
