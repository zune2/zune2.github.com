#+HTML: ---
#+HTML: title: BOJ 4195 친구 네트워크
#+HTML: tags: UnionFind
#+HTML: toc: true
#+HTML: toc_sticky: true
#+HTML: ---
#+OPTIONS: ^:nil

** BOJ 4195 친구 네트워크
- Union Find를 이용하는 문제
 
** 접근하기
- 집합의 크기를 어떻게 사용하는지 배우는 문제

** 코드
#+BEGIN_SRC cpp
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <string>
#include <map>
using namespace std;

int T;
int N;

int p[200010];

void Union_find_init(int n)
{
    for(int i=0;i<n*2;i++) {
        p[i] = -1;
    }
}

int Find(int a)
{
    if (p[a] < 0) return a;
    return p[a] = Find(p[a]);
}

void Union(int a, int b)
{
    a = Find(a);
    b = Find(b);

    if (a != b) {
        if (p[a] <= p[b]) {
            p[a] += p[b];
           p[b] = a;
        } else {
            p[b] += p[a];
            p[a] = b;        
        }
    }
}

void solve()
{
    map<string, int> mp;
    cin >> N;
    Union_find_init(N);    

    string name1, name2;
    int idx = 0;
    for(int i=0;i<N;i++) {
        cin >> name1 >> name2;
        if (mp[name1] == 0) {
            mp[name1] = ++idx;
        }

        if (mp[name2] == 0) {
            mp[name2] = ++idx;
        }

        int n1 = mp[name1];
        int n2 = mp[name2];
        Union(n1, n2);
        int cnt1 = Find(n1);
        cout << -p[cnt1]  << '\n';
    }
}

int main(int argc, char* argv[])
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin >> T;
    
    for(int tc=1;tc<=T;tc++) {
        solve();
    }
    return 0;
}
#+END_SRC

** 문제 링크
- https://www.acmicpc.net/problem/4195

** 참고자료
- https://greatzzo.tistory.com/52
